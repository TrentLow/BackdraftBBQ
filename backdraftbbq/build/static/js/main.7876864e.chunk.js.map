{"version":3,"sources":["generated/src/ApiClient.js","components/navbar.js","components/MenuItem.js","components/MenuList.js","components/Contact.js","components/About.js","generated/src/model/Error.js","generated/src/model/MenuItem.js","generated/src/api/MenuItemApi.js","components/addmenuitem.js","generated/src/model/GalleryImage.js","generated/src/api/GalleryApi.js","components/addimage.js","components/Gallery.js","Auth.js","Callback.js","App.js","serviceWorker.js","index.js"],"names":["ApiClient","Object","C_Git_Backdraftbbq_BackdraftBBQ_backdraftbbq_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","basePath","replace","authentications","Bearer","type","defaultHeaders","timeout","cache","enableCookies","window","agent","superagent","requestAgent","plugins","param","undefined","Date","toJSON","toString","path","pathParams","apiBasePath","_this","match","url","fullMatch","key","value","hasOwnProperty","paramToString","encodeURIComponent","contentType","Boolean","contentTypes","i","length","isJsonMime","fs","require","err","ReadStream","Buffer","Blob","File","params","newParams","isFileParam","Array","isArray","collectionFormat","map","join","Error","request","authNames","_this2","forEach","authName","auth","username","password","accessToken","set","Authorization","apiKey","data","apiKeyPrefix","name","query","response","returnType","status","body","keys","text","convertToType","httpMethod","queryParams","headerParams","formParams","bodyParam","accepts","callback","_this3","buildUrl","index","use","applyAuthToRequest","toUpperCase","getTime","normalizeParams","jsonPreferredMime","header","send","querystring","stringify","_formParams","attach","field","accept","responseType","_attachCookies","withCredentials","end","error","deserialize","_saveCookies","description","variables","arguments","servers","hostSettings","server","variable_name","includes","str","parseInt","parseFloat","String","parseDate","constructFromObject","itemType","item","keyType","valueType","k","result","obj","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","instance","Navbar","props","react_default","a","createElement","id","href","className","MenuItem","menuItem","title","style","color","price","authenticated","react_router_dom","to","concat","MenuCategory","border","borderRadius","backgroundColor","menuItems","components_MenuItem","MenuList","MenuList_MenuCategory","filter","category","PhoneNumber","_ref","number","Contact","Contact_PhoneNumber","src","width","height","frameborder","allowfullscreen","About","margin","code","message","classCallCheck","initialize","prototype","appetizers","sides","breakfast","kids","baskets","entrees","beverages","MenuItemApi","apiClient","postBody","callApi","menuApi","AddMenuItem","state","ondelete","getIdToken","confirm","deleteMenuitem","location","onsubmit","editMenuItem","addMenuItem","console","log","reload","oncategory","event","setState","target","onprice","ontitle","getMenuItem","for","onChange","placeholder","required","min","step","onClick","Component","GalleryImage","GalleryApi","galleryApi","AddImg","deleteGalleryImage","getGalleryImage","Gallery","gallery","Fragment","loggedIn","Auth","history","auth0","WebAuth","domain","clientID","redirectUri","origin","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","renewSession","authorize","parseHash","authResult","idToken","setSession","alert","localStorage","setItem","expiresAt","expiresIn","checkSession","error_description","removeItem","returnTo","Callback","createHistory","basename","process","App","getMenuItems","getGalleryImages","getItem","react_router","render","test","hash","src_Callback","addmenuitem","assign","navbar","components_About","components_MenuList","components_Gallery","components_Contact","addimage","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7876864e.chunk.js","sourcesContent":["/**\n * Backdraft BBQ API\n * Add, retrieve, and delete menu items or gallery images for Backdraft BBQ website\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n\n/**\n* @module ApiClient\n* @version 1.0.0\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\nclass ApiClient {\n    constructor() {\n        /**\n         * The base URL against which to resolve every API call's (relative) path.\n         * @type {String}\n         * @default https://n9p2eki06e.execute-api.us-east-1.amazonaws.com/dev\n         */\n        this.basePath = 'https://n9p2eki06e.execute-api.us-east-1.amazonaws.com/dev'.replace(/\\/+$/, '');\n\n        /**\n         * The authentication methods to be included for all API calls.\n         * @type {Array.<String>}\n         */\n        this.authentications = {\n            'Bearer': {type: 'bearer'} // JWT\n        }\n\n        /**\n         * The default HTTP headers to be included for all API calls.\n         * @type {Array.<String>}\n         * @default {}\n         */\n        this.defaultHeaders = {};\n\n        /**\n         * The default HTTP timeout for all API calls.\n         * @type {Number}\n         * @default 60000\n         */\n        this.timeout = 60000;\n\n        /**\n         * If set to false an additional timestamp parameter is added to all API GET calls to\n         * prevent browser caching\n         * @type {Boolean}\n         * @default true\n         */\n        this.cache = true;\n\n        /**\n         * If set to true, the client will save the cookies from each server\n         * response, and return them in the next request.\n         * @default false\n         */\n        this.enableCookies = false;\n\n        /*\n         * Used to save and return cookies in a node.js (non-browser) setting,\n         * if this.enableCookies is set to true.\n         */\n        if (typeof window === 'undefined') {\n          this.agent = new superagent.agent();\n        }\n\n        /*\n         * Allow user to override superagent agent\n         */\n         this.requestAgent = null;\n\n        /*\n         * Allow user to add superagent plugins\n         */\n        this.plugins = null;\n\n    }\n\n    /**\n    * Returns a string representation for an actual parameter.\n    * @param param The actual parameter.\n    * @returns {String} The string representation of <code>param</code>.\n    */\n    paramToString(param) {\n        if (param == undefined || param == null) {\n            return '';\n        }\n        if (param instanceof Date) {\n            return param.toJSON();\n        }\n\n        return param.toString();\n    }\n\n   /**\n    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n    * NOTE: query parameters are not handled here.\n    * @param {String} path The path to append to the base URL.\n    * @param {Object} pathParams The parameter values to append.\n    * @param {String} apiBasePath Base path defined in the path, operation level to override the default one\n    * @returns {String} The encoded path with parameter values substituted.\n    */\n    buildUrl(path, pathParams, apiBasePath) {\n        if (!path.match(/^\\//)) {\n            path = '/' + path;\n        }\n\n        var url = this.basePath + path;\n\n        // use API (operation, path) base path if defined\n        if (apiBasePath !== null && apiBasePath !== undefined) {\n            url = apiBasePath + path;\n        }\n\n        url = url.replace(/\\{([\\w-]+)\\}/g, (fullMatch, key) => {\n            var value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = this.paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n\n            return encodeURIComponent(value);\n        });\n\n        return url;\n    }\n\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n    isJsonMime(contentType) {\n        return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n    jsonPreferredMime(contentTypes) {\n        for (var i = 0; i < contentTypes.length; i++) {\n            if (this.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n\n        return contentTypes[0];\n    }\n\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n    isFileParam(param) {\n        // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n        if (typeof require === 'function') {\n            let fs;\n            try {\n                fs = require('fs');\n            } catch (err) {}\n            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n                return true;\n            }\n        }\n\n        // Buffer in Node.js\n        if (typeof Buffer === 'function' && param instanceof Buffer) {\n            return true;\n        }\n\n        // Blob in browser\n        if (typeof Blob === 'function' && param instanceof Blob) {\n            return true;\n        }\n\n        // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n        if (typeof File === 'function' && param instanceof File) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n    normalizeParams(params) {\n        var newParams = {};\n        for (var key in params) {\n            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n                var value = params[key];\n                if (this.isFileParam(value) || Array.isArray(value)) {\n                    newParams[key] = value;\n                } else {\n                    newParams[key] = this.paramToString(value);\n                }\n            }\n        }\n\n        return newParams;\n    }\n\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n    buildCollectionParam(param, collectionFormat) {\n        if (param == null) {\n            return null;\n        }\n        switch (collectionFormat) {\n            case 'csv':\n                return param.map(this.paramToString).join(',');\n            case 'ssv':\n                return param.map(this.paramToString).join(' ');\n            case 'tsv':\n                return param.map(this.paramToString).join('\\t');\n            case 'pipes':\n                return param.map(this.paramToString).join('|');\n            case 'multi':\n                //return the array directly as SuperAgent will handle it as expected\n                return param.map(this.paramToString);\n            default:\n                throw new Error('Unknown collection format: ' + collectionFormat);\n        }\n    }\n\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n    applyAuthToRequest(request, authNames) {\n        authNames.forEach((authName) => {\n            var auth = this.authentications[authName];\n            switch (auth.type) {\n                case 'basic':\n                    if (auth.username || auth.password) {\n                        request.auth(auth.username || '', auth.password || '');\n                    }\n\n                    break;\n                case 'bearer':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                case 'apiKey':\n                    if (auth.apiKey) {\n                        var data = {};\n                        if (auth.apiKeyPrefix) {\n                            data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n                        } else {\n                            data[auth.name] = auth.apiKey;\n                        }\n\n                        if (auth['in'] === 'header') {\n                            request.set(data);\n                        } else {\n                            request.query(data);\n                        }\n                    }\n\n                    break;\n                case 'oauth2':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                default:\n                    throw new Error('Unknown authentication type: ' + auth.type);\n            }\n        });\n    }\n\n   /**\n    * Deserializes an HTTP response body into a value of the specified type.\n    * @param {Object} response A SuperAgent response object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns A value of the specified type.\n    */\n    deserialize(response, returnType) {\n        if (response == null || returnType == null || response.status == 204) {\n            return null;\n        }\n\n        // Rely on SuperAgent for parsing response body.\n        // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n        var data = response.body;\n        if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n            // SuperAgent does not always produce a body; use the unparsed response as a fallback\n            data = response.text;\n        }\n\n        return ApiClient.convertToType(data, returnType);\n    }\n\n   /**\n    * Callback function to receive the result of the operation.\n    * @callback module:ApiClient~callApiCallback\n    * @param {String} error Error message, if any.\n    * @param data The data returned by the service call.\n    * @param {String} response The complete HTTP response.\n    */\n\n   /**\n    * Invokes the REST service using the supplied settings and parameters.\n    * @param {String} path The base URL to invoke.\n    * @param {String} httpMethod The HTTP method to use.\n    * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n    * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n    * @param {Object} bodyParam The value to pass as the request body.\n    * @param {Array.<String>} authNames An array of authentication type names.\n    * @param {Array.<String>} contentTypes An array of request MIME types.\n    * @param {Array.<String>} accepts An array of acceptable response MIME types.\n    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n    * constructor for a complex type.\n    * @param {String} apiBasePath base path defined in the operation/path level to override the default one \n    * @param {module:ApiClient~callApiCallback} callback The callback function.\n    * @returns {Object} The SuperAgent request object.\n    */\n    callApi(path, httpMethod, pathParams,\n        queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n        returnType, apiBasePath, callback) {\n\n        var url = this.buildUrl(path, pathParams, apiBasePath);\n        var request = superagent(httpMethod, url);\n\n        if (this.plugins !== null) {\n            for (var index in this.plugins) {\n                if (this.plugins.hasOwnProperty(index)) {\n                    request.use(this.plugins[index])\n                }\n            }\n        }\n\n        // apply authentications\n        this.applyAuthToRequest(request, authNames);\n\n        // set query parameters\n        if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n            queryParams['_'] = new Date().getTime();\n        }\n\n        request.query(this.normalizeParams(queryParams));\n\n        // set header parameters\n        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n        // set requestAgent if it is set by user\n        if (this.requestAgent) {\n          request.agent(this.requestAgent);\n        }\n\n        // set request timeout\n        request.timeout(this.timeout);\n\n        var contentType = this.jsonPreferredMime(contentTypes);\n        if (contentType) {\n            // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n            if(contentType != 'multipart/form-data') {\n                request.type(contentType);\n            }\n        } else if (!request.header['Content-Type']) {\n            request.type('application/json');\n        }\n\n        if (contentType === 'application/x-www-form-urlencoded') {\n            request.send(querystring.stringify(this.normalizeParams(formParams)));\n        } else if (contentType == 'multipart/form-data') {\n            var _formParams = this.normalizeParams(formParams);\n            for (var key in _formParams) {\n                if (_formParams.hasOwnProperty(key)) {\n                    if (this.isFileParam(_formParams[key])) {\n                        // file field\n                        request.attach(key, _formParams[key]);\n                    } else {\n                        request.field(key, _formParams[key]);\n                    }\n                }\n            }\n        } else if (bodyParam !== null && bodyParam !== undefined) {\n            request.send(bodyParam);\n        }\n\n        var accept = this.jsonPreferredMime(accepts);\n        if (accept) {\n            request.accept(accept);\n        }\n\n        if (returnType === 'Blob') {\n          request.responseType('blob');\n        } else if (returnType === 'String') {\n          request.responseType('string');\n        }\n\n        // Attach previously saved cookies, if enabled\n        if (this.enableCookies){\n            if (typeof window === 'undefined') {\n                this.agent._attachCookies(request);\n            }\n            else {\n                request.withCredentials();\n            }\n        }\n\n        request.end((error, response) => {\n            if (callback) {\n                var data = null;\n                if (!error) {\n                    try {\n                        data = this.deserialize(response, returnType);\n                        if (this.enableCookies && typeof window === 'undefined'){\n                            this.agent._saveCookies(response);\n                        }\n                    } catch (err) {\n                        error = err;\n                    }\n                }\n\n                callback(error, data, response);\n            }\n        });\n\n        return request;\n    }\n\n    /**\n    * Parses an ISO-8601 string representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n    static parseDate(str) {\n        return new Date(str);\n    }\n\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n    static convertToType(data, type) {\n        if (data === null || data === undefined)\n            return data\n\n        switch (type) {\n            case 'Boolean':\n                return Boolean(data);\n            case 'Integer':\n                return parseInt(data, 10);\n            case 'Number':\n                return parseFloat(data);\n            case 'String':\n                return String(data);\n            case 'Date':\n                return ApiClient.parseDate(String(data));\n            case 'Blob':\n                return data;\n            default:\n                if (type === Object) {\n                    // generic object, return directly\n                    return data;\n                } else if (typeof type.constructFromObject === 'function') {\n                    // for model type like User and enum class\n                    return type.constructFromObject(data);\n                } else if (Array.isArray(type)) {\n                    // for array type like: ['String']\n                    var itemType = type[0];\n\n                    return data.map((item) => {\n                        return ApiClient.convertToType(item, itemType);\n                    });\n                } else if (typeof type === 'object') {\n                    // for plain object type like: {'String': 'Integer'}\n                    var keyType, valueType;\n                    for (var k in type) {\n                        if (type.hasOwnProperty(k)) {\n                            keyType = k;\n                            valueType = type[k];\n                            break;\n                        }\n                    }\n\n                    var result = {};\n                    for (var k in data) {\n                        if (data.hasOwnProperty(k)) {\n                            var key = ApiClient.convertToType(k, keyType);\n                            var value = ApiClient.convertToType(data[k], valueType);\n                            result[key] = value;\n                        }\n                    }\n\n                    return result;\n                } else {\n                    // for unknown type, return the data directly\n                    return data;\n                }\n        }\n    }\n\n  /**\n    * Gets an array of host settings\n    * @returns An array of host settings\n    */\n    hostSettings() {\n        return [\n            {\n              'url': \"https://n9p2eki06e.execute-api.us-east-1.amazonaws.com/dev\",\n              'description': \"No description provided\",\n            },\n            {\n              'url': \"http://localhost:3000\",\n              'description': \"No description provided\",\n            }\n      ];\n    }\n\n    getBasePathFromSettings(index, variables={}) {\n        var servers = this.hostSettings();\n\n        // check array index out of bound\n        if (index < 0 || index >= servers.length) {\n            throw new Error(\"Invalid index \" + index + \" when selecting the host settings. Must be less than \" + servers.length);\n        }\n\n        var server = servers[index];\n        var url = server['url'];\n\n        // go through variable and assign a value\n        for (var variable_name in server['variables']) {\n            if (variable_name in variables) {\n                if (server['variables'][variable_name]['enum_values'].includes(variables[variable_name])) {\n                    url = url.replace(\"{\" + variable_name + \"}\", variables[variable_name]);\n                } else {\n                    throw new Error(\"The variable `\" + variable_name + \"` in the host URL has invalid value \" + variables[variable_name] + \". Must be \" + server['variables'][variable_name]['enum_values'] + \".\");\n                }\n            } else {\n                // use default value\n                url = url.replace(\"{\" + variable_name + \"}\", server['variables'][variable_name]['default_value'])\n            }\n        }\n        return url;\n    }\n\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n    static constructFromObject(data, obj, itemType) {\n        if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n                if (data.hasOwnProperty(i))\n                    obj[i] = ApiClient.convertToType(data[i], itemType);\n            }\n        } else {\n            for (var k in data) {\n                if (data.hasOwnProperty(k))\n                    obj[k] = ApiClient.convertToType(data[k], itemType);\n            }\n        }\n    };\n}\n\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\nApiClient.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n};\n\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\nApiClient.instance = new ApiClient();\nexport default ApiClient;\n","import React from \"react\";\r\n\r\nconst Navbar = props => (\r\n  <header id=\"header\">\r\n    <nav id=\"nav-bar\">\r\n      <a href=\"#home\" className=\"nav-link\">\r\n        Home\r\n      </a>\r\n      <a href=\"#about\" className=\"nav-link\">\r\n        About\r\n      </a>\r\n      <div className=\"menu\">\r\n        <button className=\"dropbtn\">\r\n          Menu<i className=\"fa fa-caret-down\" />\r\n        </button>\r\n        <div className=\"dropdown-content\">\r\n          <a href=\"#appetizers\" className=\"nav-link\">\r\n            Appetizers\r\n          </a>\r\n          <br />\r\n          <a href=\"#sideorders\" className=\"nav-link\">\r\n            Side Orders\r\n          </a>\r\n          <br />\r\n          <a href=\"#breakfast\" className=\"nav-link\">\r\n            Breakfast\r\n          </a>\r\n          <br />\r\n          <a href=\"#kidsmenu\" className=\"nav-link\">\r\n            Kids Menu\r\n          </a>\r\n          <br />\r\n          <a href=\"#sandwichbaskets\" className=\"nav-link\">\r\n            Sandwiches & Baskets\r\n          </a>\r\n          <br />\r\n          <a href=\"#bfs\" className=\"nav-link\">\r\n            Beef, Chicken, & Shrimp\r\n          </a>\r\n          <br />\r\n          <a href=\"#beverages\" className=\"nav-link\">\r\n            Beverages\r\n          </a>\r\n          <br />\r\n        </div>\r\n      </div>\r\n      <a href=\"#gallery\" className=\"nav-link\">\r\n        Gallery\r\n      </a>\r\n      <a href=\"#contact\" className=\"nav-link\">\r\n        Contact\r\n      </a>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nconst MenuItem = props => {\r\n  return (\r\n    <div>\r\n      {props.menuItem.title}{\" \"}\r\n      <span style={{ color: \"black\" }}>{props.menuItem.price}</span>\r\n      {props.authenticated && (\r\n        <Link to={`/menu/${props.menuItem.id}`}>Edit</Link>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MenuItem;\r\n","import React from \"react\";\r\nimport MenuItem from \"./MenuItem\";\r\n\r\nconst MenuCategory = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        border: \"4px solid-black\",\r\n        borderRadius: \"5px\",\r\n        backgroundColor: \"white\"\r\n      }}\r\n      id={props.id}\r\n    >\r\n      <h2>{props.name}</h2>\r\n      {props.menuItems.map((menuItem, key) => (\r\n        <MenuItem menuItem={menuItem} authenticated={props.authenticated} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nconst MenuList = props => (\r\n  <div>\r\n    <h1>Menu</h1>\r\n    <MenuCategory\r\n      name=\"Appetizers\"\r\n      id=\"appetizers\"\r\n      menuItems={props.menuItems.filter(item => item.category === \"appetizers\")}\r\n      authenticated={props.authenticated}\r\n    />\r\n    <MenuCategory\r\n      name=\"Side Orders\"\r\n      id=\"sideorders\"\r\n      menuItems={props.menuItems.filter(item => item.category === \"sides\")}\r\n      authenticated={props.authenticated}\r\n    />\r\n    <MenuCategory\r\n      name=\"Breakfast\"\r\n      id=\"breakfast\"\r\n      menuItems={props.menuItems.filter(item => item.category === \"breakfast\")}\r\n      authenticated={props.authenticated}\r\n    />\r\n    <MenuCategory\r\n      name=\"Kids Menu\"\r\n      id=\"kidsmenu\"\r\n      menuItems={props.menuItems.filter(item => item.category === \"kids\")}\r\n      authenticated={props.authenticated}\r\n    />\r\n    <MenuCategory\r\n      name=\"Sandwiches & Baskets\"\r\n      id=\"sandwichbaskets\"\r\n      menuItems={props.menuItems.filter(item => item.category === \"baskets\")}\r\n      authenticated={props.authenticated}\r\n    />\r\n    <MenuCategory\r\n      name=\"Dinners\"\r\n      id=\"bfs\"\r\n      menuItems={props.menuItems.filter(item => item.category === \"entrees\")}\r\n      authenticated={props.authenticated}\r\n    />\r\n    <MenuCategory\r\n      name=\"Beverages\"\r\n      id=\"beverages\"\r\n      menuItems={props.menuItems.filter(item => item.category === \"beverages\")}\r\n      authenticated={props.authenticated}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default MenuList;\r\n","import React from \"react\";\r\n\r\nconst PhoneNumber = ({ number }) => (\r\n  <div>\r\n    <a href={`tel:${number}`}>Call{number}</a>\r\n  </div>\r\n);\r\n\r\nconst Contact = props => (\r\n  <div>\r\n    <h1>Contact</h1>\r\n    <div\r\n      id=\"contact\"\r\n      style={{\r\n        borderRadius: \"5px\",\r\n        backgroundColor: \"white\"\r\n      }}\r\n    >\r\n      <p>Business Hours:</p>\r\n      <p>Monday-Thursday: 11am/8pm Friday-Saturday: 11am/9pm</p>\r\n      <p>We would love to hear from you! Remember we do carry out!</p>\r\n      <p>Contact us so we can get in touch about your catering needs!!</p>\r\n      <PhoneNumber number=\"(701)-453-3452\" />\r\n      Catering:\r\n      <PhoneNumber number=\"(701)-453-3413\" />\r\n      <div>\r\n        <a href=\"mailto:backdraftbbqnd@gmail.com\">Email Us</a>\r\n      </div>\r\n      <iframe\r\n        id=\"map\"\r\n        src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2653.36710009526!2d-101.73908468416074!3d48.31502264676407!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x52df4783895a2599%3A0xa07fcafccd80dde!2s213+Main+St+N%2C+Berthold%2C+ND+58718!5e0!3m2!1sen!2sus!4v1556233846926!5m2!1sen!2sus\"\r\n        width=\"600\"\r\n        height=\"450\"\r\n        frameborder=\"0\"\r\n        allowfullscreen\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\n\r\nconst About = props => (\r\n  <div>\r\n    <h1>About</h1>\r\n    <div\r\n      id=\"about\"\r\n      style={{\r\n        borderRadius: \"5px\",\r\n        margin: \"0 auto\",\r\n        backgroundColor: \"white\"\r\n      }}\r\n    >\r\n      <p>\r\n        Backdraft Cafe and BBQ is a small town diner in the middle of Berthold,\r\n        ND. We strive to bring you high quality food and atmosphere. It is the\r\n        home of the one and only Backdraft Brisket Burger, a cheese burger with\r\n        a slice of some of the best smoked brisket you may ever taste. The diner\r\n        was established November 2018, under the management of Kalvin Myers, and\r\n        his daughter Christa. These two take great pride in what they dish up!\r\n        Not only does this small town eatery have a top tier location, they will\r\n        bring the food to you!! Call now to place your catering needs!\r\n      </p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default About;\r\n","/**\n * Backdraft BBQ API\n * Add, retrieve, and delete menu items or gallery images for Backdraft BBQ website\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\nimport ApiClient from '../ApiClient';\n\n/**\n * The Error model module.\n * @module model/Error\n * @version 1.0.0\n */\nclass Error {\n    /**\n     * Constructs a new <code>Error</code>.\n     * @alias module:model/Error\n     * @param code {Number} \n     * @param message {String} \n     */\n    constructor(code, message) { \n        \n        Error.initialize(this, code, message);\n    }\n\n    /**\n     * Initializes the fields of this object.\n     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).\n     * Only for internal use.\n     */\n    static initialize(obj, code, message) { \n        obj['code'] = code;\n        obj['message'] = message;\n    }\n\n    /**\n     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.\n     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n     * @param {Object} data The plain JavaScript object bearing properties of interest.\n     * @param {module:model/Error} obj Optional instance to populate.\n     * @return {module:model/Error} The populated <code>Error</code> instance.\n     */\n    static constructFromObject(data, obj) {\n        if (data) {\n            obj = obj || new Error();\n\n            if (data.hasOwnProperty('code')) {\n                obj['code'] = ApiClient.convertToType(data['code'], 'Number');\n            }\n            if (data.hasOwnProperty('message')) {\n                obj['message'] = ApiClient.convertToType(data['message'], 'String');\n            }\n        }\n        return obj;\n    }\n\n\n}\n\n/**\n * @member {Number} code\n */\nError.prototype['code'] = undefined;\n\n/**\n * @member {String} message\n */\nError.prototype['message'] = undefined;\n\n\n\n\n\n\nexport default Error;\n\n","/**\n * Backdraft BBQ API\n * Add, retrieve, and delete menu items or gallery images for Backdraft BBQ website\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\nimport ApiClient from '../ApiClient';\n\n/**\n * The MenuItem model module.\n * @module model/MenuItem\n * @version 1.0.0\n */\nclass MenuItem {\n    /**\n     * Constructs a new <code>MenuItem</code>.\n     * @alias module:model/MenuItem\n     * @param id {String} \n     * @param price {String} \n     * @param title {String} \n     * @param category {module:model/MenuItem.CategoryEnum} \n     */\n    constructor(id, price, title, category) { \n        \n        MenuItem.initialize(this, id, price, title, category);\n    }\n\n    /**\n     * Initializes the fields of this object.\n     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).\n     * Only for internal use.\n     */\n    static initialize(obj, id, price, title, category) { \n        obj['id'] = id;\n        obj['price'] = price;\n        obj['title'] = title;\n        obj['category'] = category;\n    }\n\n    /**\n     * Constructs a <code>MenuItem</code> from a plain JavaScript object, optionally creating a new instance.\n     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n     * @param {Object} data The plain JavaScript object bearing properties of interest.\n     * @param {module:model/MenuItem} obj Optional instance to populate.\n     * @return {module:model/MenuItem} The populated <code>MenuItem</code> instance.\n     */\n    static constructFromObject(data, obj) {\n        if (data) {\n            obj = obj || new MenuItem();\n\n            if (data.hasOwnProperty('id')) {\n                obj['id'] = ApiClient.convertToType(data['id'], 'String');\n            }\n            if (data.hasOwnProperty('price')) {\n                obj['price'] = ApiClient.convertToType(data['price'], 'String');\n            }\n            if (data.hasOwnProperty('title')) {\n                obj['title'] = ApiClient.convertToType(data['title'], 'String');\n            }\n            if (data.hasOwnProperty('category')) {\n                obj['category'] = ApiClient.convertToType(data['category'], 'String');\n            }\n        }\n        return obj;\n    }\n\n\n}\n\n/**\n * @member {String} id\n */\nMenuItem.prototype['id'] = undefined;\n\n/**\n * @member {String} price\n */\nMenuItem.prototype['price'] = undefined;\n\n/**\n * @member {String} title\n */\nMenuItem.prototype['title'] = undefined;\n\n/**\n * @member {module:model/MenuItem.CategoryEnum} category\n */\nMenuItem.prototype['category'] = undefined;\n\n\n\n\n\n/**\n * Allowed values for the <code>category</code> property.\n * @enum {String}\n * @readonly\n */\nMenuItem['CategoryEnum'] = {\n\n    /**\n     * value: \"appetizers\"\n     * @const\n     */\n    \"appetizers\": \"appetizers\",\n\n    /**\n     * value: \"sides\"\n     * @const\n     */\n    \"sides\": \"sides\",\n\n    /**\n     * value: \"breakfast\"\n     * @const\n     */\n    \"breakfast\": \"breakfast\",\n\n    /**\n     * value: \"kids\"\n     * @const\n     */\n    \"kids\": \"kids\",\n\n    /**\n     * value: \"baskets\"\n     * @const\n     */\n    \"baskets\": \"baskets\",\n\n    /**\n     * value: \"entrees\"\n     * @const\n     */\n    \"entrees\": \"entrees\",\n\n    /**\n     * value: \"beverages\"\n     * @const\n     */\n    \"beverages\": \"beverages\"\n};\n\n\n\nexport default MenuItem;\n\n","/**\n * Backdraft BBQ API\n * Add, retrieve, and delete menu items or gallery images for Backdraft BBQ website\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport Error from '../model/Error';\nimport MenuItem from '../model/MenuItem';\n\n/**\n* MenuItem service.\n* @module api/MenuItemApi\n* @version 1.0.0\n*/\nexport default class MenuItemApi {\n\n    /**\n    * Constructs a new MenuItemApi. \n    * @alias module:api/MenuItemApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n    /**\n     * Callback function to receive the result of the addMenuItem operation.\n     * @callback module:api/MenuItemApi~addMenuItemCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/MenuItem} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Adds a new menu item\n     * @param {module:model/MenuItem} menuItem The menu item details\n     * @param {module:api/MenuItemApi~addMenuItemCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/MenuItem}\n     */\n    addMenuItem(menuItem, callback) {\n      let postBody = menuItem;\n      // verify the required parameter 'menuItem' is set\n      if (menuItem === undefined || menuItem === null) {\n        throw new Error(\"Missing the required parameter 'menuItem' when calling addMenuItem\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['Bearer'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = MenuItem;\n      return this.apiClient.callApi(\n        '/menu_item', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the deleteMenuitem operation.\n     * @callback module:api/MenuItemApi~deleteMenuitemCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Delete the specified menu item\n     * @param {String} id The id of the menu item to delete\n     * @param {module:api/MenuItemApi~deleteMenuitemCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    deleteMenuitem(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling deleteMenuitem\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['Bearer'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = null;\n      return this.apiClient.callApi(\n        '/menu_item/{id}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the editMenuItem operation.\n     * @callback module:api/MenuItemApi~editMenuItemCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/MenuItem} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Edit a new menu item\n     * @param {String} id The id of the menu item to edit\n     * @param {module:model/MenuItem} menuItem The menu item details\n     * @param {module:api/MenuItemApi~editMenuItemCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/MenuItem}\n     */\n    editMenuItem(id, menuItem, callback) {\n      let postBody = menuItem;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling editMenuItem\");\n      }\n      // verify the required parameter 'menuItem' is set\n      if (menuItem === undefined || menuItem === null) {\n        throw new Error(\"Missing the required parameter 'menuItem' when calling editMenuItem\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['Bearer'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = MenuItem;\n      return this.apiClient.callApi(\n        '/menu_item/{id}', 'PATCH',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getMenuItem operation.\n     * @callback module:api/MenuItemApi~getMenuItemCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/MenuItem} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get a menu item\n     * @param {String} id The id of the menu item to retrieve\n     * @param {module:api/MenuItemApi~getMenuItemCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/MenuItem}\n     */\n    getMenuItem(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getMenuItem\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = MenuItem;\n      return this.apiClient.callApi(\n        '/menu_item/{id}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getMenuItems operation.\n     * @callback module:api/MenuItemApi~getMenuItemsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/MenuItem>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get all menu items\n     * @param {module:api/MenuItemApi~getMenuItemsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/MenuItem>}\n     */\n    getMenuItems(callback) {\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [MenuItem];\n      return this.apiClient.callApi(\n        '/menu_item', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n\n}\n","import React, { Component } from \"react\";\r\nimport MenuItemApi from \"../generated/src/api/MenuItemApi.js\";\r\n\r\nconst menuApi = new MenuItemApi();\r\n\r\nclass AddMenuItem extends Component {\r\n  state = { category: \"appetizers\", price: \"\", title: \"\" };\r\n  componentDidMount() {\r\n    if (this.props.match.params.id) {\r\n      menuApi.getMenuItem(\r\n        this.props.match.params.id,\r\n        (error, data, response) => {\r\n          console.log(data);\r\n          this.setState({\r\n            category: data.category,\r\n            price: data.price,\r\n            title: data.title\r\n          });\r\n        }\r\n      );\r\n    }\r\n  }\r\n  ondelete = () => {\r\n    menuApi.apiClient.authentications[\r\n      \"Bearer\"\r\n    ].accessToken = this.props.auth.getIdToken();\r\n    let txt;\r\n    const result = window.confirm(\r\n      `Are you sure you want to delete ${this.state.title}?`\r\n    );\r\n    if (result == true) {\r\n      menuApi.deleteMenuitem(this.props.match.params.id);\r\n      window.location.replace(\"/\");\r\n    } else {\r\n      txt = \"You canceled process!\";\r\n    }\r\n  };\r\n  onsubmit = () => {\r\n    menuApi.apiClient.authentications[\r\n      \"Bearer\"\r\n    ].accessToken = this.props.auth.getIdToken();\r\n    if (this.props.match.params.id) {\r\n      menuApi.editMenuItem(this.props.match.params.id, {\r\n        category: this.state.category,\r\n        price: this.state.price,\r\n        title: this.state.title,\r\n        id: \"\"\r\n      });\r\n    } else {\r\n      menuApi.addMenuItem(\r\n        {\r\n          category: this.state.category,\r\n          price: this.state.price,\r\n          title: this.state.title,\r\n          id: \"\"\r\n        },\r\n        (error, data, response) => {\r\n          console.log(data);\r\n        }\r\n      );\r\n      window.location.reload();\r\n    }\r\n  };\r\n  oncategory = event => {\r\n    this.setState({ category: event.target.value }, () =>\r\n      console.log(this.state.category)\r\n    );\r\n  };\r\n  onprice = event => {\r\n    this.setState({ price: event.target.value }, () =>\r\n      console.log(this.state.price)\r\n    );\r\n  };\r\n  ontitle = event => {\r\n    this.setState({ title: event.target.value }, () =>\r\n      console.log(this.state.title)\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Add Menu Item</h1>\r\n        <div\r\n          id=\"additem\"\r\n          style={{\r\n            borderRadius: \"5px\",\r\n            backgroundColor: \"white\"\r\n          }}\r\n        >\r\n          <div>\r\n            <label id=\"catagory-label\" for=\"catagory\">\r\n              Category\r\n            </label>\r\n            <select onChange={this.oncategory}>\r\n              <option value=\"appetizers\">Appetizers</option>\r\n              <option value=\"sides\">Sides</option>\r\n              <option value=\"breakfast\">Breakfast</option>\r\n              <option value=\"kids\">Kids</option>\r\n              <option value=\"baskets\">Baskets</option>\r\n              <option value=\"entrees\">Entrees</option>\r\n              <option value=\"beverages\">Beverages</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label id=\"name-label\">Name</label>\r\n            <input\r\n              id=\"name\"\r\n              type=\"text\"\r\n              placeholder=\"Name\"\r\n              required\r\n              onChange={this.ontitle}\r\n              value={this.state.title}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label id=\"number-label\">Price</label>\r\n            <input\r\n              id=\"number\"\r\n              type=\"number\"\r\n              min=\"0.01\"\r\n              step=\"0.01\"\r\n              placeholder=\"1.99\"\r\n              required\r\n              onChange={this.onprice}\r\n              value={this.state.price}\r\n            />\r\n          </div>\r\n          <button onClick={this.onsubmit}>Submit</button>\r\n          <button onClick={this.ondelete}>Delete</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AddMenuItem;\r\n","/**\n * Backdraft BBQ API\n * Add, retrieve, and delete menu items or gallery images for Backdraft BBQ website\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\nimport ApiClient from '../ApiClient';\n\n/**\n * The GalleryImage model module.\n * @module model/GalleryImage\n * @version 1.0.0\n */\nclass GalleryImage {\n    /**\n     * Constructs a new <code>GalleryImage</code>.\n     * @alias module:model/GalleryImage\n     * @param id {String} \n     * @param url {String} \n     */\n    constructor(id, url) { \n        \n        GalleryImage.initialize(this, id, url);\n    }\n\n    /**\n     * Initializes the fields of this object.\n     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).\n     * Only for internal use.\n     */\n    static initialize(obj, id, url) { \n        obj['id'] = id;\n        obj['url'] = url;\n    }\n\n    /**\n     * Constructs a <code>GalleryImage</code> from a plain JavaScript object, optionally creating a new instance.\n     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n     * @param {Object} data The plain JavaScript object bearing properties of interest.\n     * @param {module:model/GalleryImage} obj Optional instance to populate.\n     * @return {module:model/GalleryImage} The populated <code>GalleryImage</code> instance.\n     */\n    static constructFromObject(data, obj) {\n        if (data) {\n            obj = obj || new GalleryImage();\n\n            if (data.hasOwnProperty('id')) {\n                obj['id'] = ApiClient.convertToType(data['id'], 'String');\n            }\n            if (data.hasOwnProperty('url')) {\n                obj['url'] = ApiClient.convertToType(data['url'], 'String');\n            }\n        }\n        return obj;\n    }\n\n\n}\n\n/**\n * @member {String} id\n */\nGalleryImage.prototype['id'] = undefined;\n\n/**\n * @member {String} url\n */\nGalleryImage.prototype['url'] = undefined;\n\n\n\n\n\n\nexport default GalleryImage;\n\n","/**\n * Backdraft BBQ API\n * Add, retrieve, and delete menu items or gallery images for Backdraft BBQ website\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport Error from '../model/Error';\nimport GalleryImage from '../model/GalleryImage';\n\n/**\n* Gallery service.\n* @module api/GalleryApi\n* @version 1.0.0\n*/\nexport default class GalleryApi {\n\n    /**\n    * Constructs a new GalleryApi. \n    * @alias module:api/GalleryApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n    /**\n     * Callback function to receive the result of the addGalleryImage operation.\n     * @callback module:api/GalleryApi~addGalleryImageCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/GalleryImage} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Adds a new gallery image\n     * @param {File} body The gallery image\n     * @param {module:api/GalleryApi~addGalleryImageCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/GalleryImage}\n     */\n    addGalleryImage(body, callback) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling addGalleryImage\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['Bearer'];\n      let contentTypes = ['image/png'];\n      let accepts = ['application/json'];\n      let returnType = GalleryImage;\n      return this.apiClient.callApi(\n        '/gallery', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the deleteGalleryImage operation.\n     * @callback module:api/GalleryApi~deleteGalleryImageCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Delete the specified menu item\n     * @param {String} id The id of the gallery image to delete\n     * @param {module:api/GalleryApi~deleteGalleryImageCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    deleteGalleryImage(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling deleteGalleryImage\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['Bearer'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = null;\n      return this.apiClient.callApi(\n        '/gallery/{id}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getGalleryImages operation.\n     * @callback module:api/GalleryApi~getGalleryImagesCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/GalleryImage>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get all gallery iamges\n     * @param {module:api/GalleryApi~getGalleryImagesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/GalleryImage>}\n     */\n    getGalleryImages(callback) {\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [GalleryImage];\n      return this.apiClient.callApi(\n        '/gallery', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n\n}\n","import React, { Component } from \"react\";\r\nimport GalleryApi from \"../generated/src/api/GalleryApi\";\r\n\r\nconst galleryApi = new GalleryApi();\r\nclass AddImg extends Component {\r\n  state = { url: \"\" };\r\n  componentDidMount() {\r\n    if (this.props.match.params.id) {\r\n      galleryApi.getGalleryImage(\r\n        this.props.match.params.id,\r\n        (error, data, response) => {\r\n          console.log(data);\r\n          this.setState({\r\n            url: data.url\r\n          });\r\n        }\r\n      );\r\n    }\r\n  }\r\n  ondelete = () => {\r\n    let txt;\r\n    const result = window.confirm(\r\n      `Are you sure you want to delete ${this.state.title}?`\r\n    );\r\n    if (result == true) {\r\n      galleryApi.deleteGalleryImage(this.props.match.params.id);\r\n    } else {\r\n      txt = \"You canceled the deletion process!\";\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Gallery</h1>\r\n        <div\r\n          id=\"addimg\"\r\n          style={{\r\n            borderRadius: \"5px\",\r\n            margin: \"0 auto\",\r\n            backgroundColor: \"white\",\r\n            width: \"45%\"\r\n          }}\r\n        >\r\n          <div>\r\n            <label id=\"name-label\">Name</label>\r\n            <input id=\"name\" type=\"text\" placeholder=\"Name\" required />\r\n            <input id=\"file\" type=\"file\" required />\r\n          </div>\r\n          <button onClick={this.ondelete}>Delete</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AddImg;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nconst Gallery = props => (\r\n  <div>\r\n    <h1>Gallery</h1>\r\n    <div\r\n      id=\"gallery\"\r\n      style={{\r\n        borderRadius: \"5px\",\r\n        backgroundColor: \"white\"\r\n      }}\r\n    >\r\n      {props.gallery.map(gallery => (\r\n        <React.Fragment>\r\n          {props.loggedIn && (\r\n            <Link to={`admin/gallery/${gallery.id}`}>Edit</Link>\r\n          )}{\" \"}\r\n          <img key={gallery.id} src={gallery.url} />\r\n        </React.Fragment>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Gallery;\r\n","import auth0 from \"auth0-js\";\r\n\r\nexport default class Auth {\r\n  accessToken;\r\n  idToken;\r\n  expiresAt;\r\n  history = null;\r\n\r\n  auth0 = new auth0.WebAuth({\r\n    domain: \"backdraft.auth0.com\",\r\n    clientID: \"wel5Q5i3sc19pl4NtqhuO0AKOnoENpSQ\",\r\n    redirectUri: `${window.origin}/callback`,\r\n    responseType: \"token id_token\"\r\n  });\r\n\r\n  login() {\r\n    this.auth0.authorize();\r\n  }\r\n\r\n  constructor(history) {\r\n    this.history = history;\r\n    this.login = this.login.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n    this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    this.getAccessToken = this.getAccessToken.bind(this);\r\n    this.getIdToken = this.getIdToken.bind(this);\r\n    this.renewSession = this.renewSession.bind(this);\r\n  }\r\n\r\n  handleAuthentication() {\r\n    this.auth0.parseHash((err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n      } else if (err) {\r\n        this.history.replace(\"/\");\r\n        console.log(err);\r\n        alert(`Error: ${err.error}. Check the console for further details.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  getAccessToken() {\r\n    return this.accessToken;\r\n  }\r\n\r\n  getIdToken() {\r\n    return this.idToken;\r\n  }\r\n\r\n  setSession(authResult) {\r\n    // Set isLoggedIn flag in localStorage\r\n    localStorage.setItem(\"isLoggedIn\", \"true\");\r\n\r\n    // Set the time that the Access Token will expire at\r\n    let expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\r\n    this.accessToken = authResult.accessToken;\r\n    this.idToken = authResult.idToken;\r\n    this.expiresAt = expiresAt;\r\n\r\n    // navigate to the home route\r\n    this.history.replace(\"/\");\r\n  }\r\n\r\n  renewSession() {\r\n    this.auth0.checkSession({}, (err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n      } else if (err) {\r\n        this.logout();\r\n        console.log(\"renew error\", err);\r\n        alert(\r\n          `Could not get a new token (${err.error}: ${err.error_description}).`\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    // Remove tokens and expiry time\r\n    this.accessToken = null;\r\n    this.idToken = null;\r\n    this.expiresAt = 0;\r\n\r\n    // Remove isLoggedIn flag from localStorage\r\n    localStorage.removeItem(\"isLoggedIn\");\r\n\r\n    this.auth0.logout({\r\n      returnTo: window.location.origin\r\n    });\r\n\r\n    // navigate to the home route\r\n    this.history.replace(\"/\");\r\n  }\r\n\r\n  isAuthenticated() {\r\n    // Check whether the current time is past the\r\n    // access token's expiry time\r\n    let expiresAt = this.expiresAt;\r\n    return new Date().getTime() < expiresAt;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass Callback extends Component {\r\n    render() {\r\n    return (\r\n            <div>\r\n                Loading...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Callback;","import React, { Component } from \"react\";\r\nimport Navbar from \"./components/navbar\";\r\nimport \"./App.css\";\r\nimport MenuList from \"./components/MenuList\";\r\nimport Contact from \"./components/Contact\";\r\nimport About from \"./components/About\";\r\nimport MenuItemApi from \"./generated/src/api/MenuItemApi.js\";\r\nimport AddMenuItem from \"./components/addmenuitem\";\r\nimport AddImg from \"./components/addimage\";\r\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Gallery from \"./components/Gallery\";\r\nimport GalleryApi from \"./generated/src/api/GalleryApi\";\r\nimport Auth from \"./Auth\";\r\nimport Callback from \"./Callback\";\r\nimport createHistory from \"history/createBrowserHistory\";\r\n\r\nconst history = createHistory({\r\n  basename: process.env.PUBLIC_URL\r\n});\r\n\r\nconst auth = new Auth(history);\r\nconst menuApi = new MenuItemApi();\r\nconst galleryApi = new GalleryApi();\r\n\r\nconst handleAuthentication = (nextState, replace) => {\r\n  if (/access_token|id_token|error/.test(nextState.location.hash)) {\r\n    auth.handleAuthentication();\r\n  }\r\n};\r\n\r\nclass App extends Component {\r\n  state = { menuItems: [], gallery: [] };\r\n\r\n  componentDidMount() {\r\n    menuApi.getMenuItems((error, data, response) => {\r\n      console.log(data);\r\n      this.setState({ menuItems: data || [] });\r\n    });\r\n    galleryApi.getGalleryImages((error, data, response) => {\r\n      console.log(data);\r\n      this.setState({ gallery: data || [] });\r\n    });\r\n    if (localStorage.getItem(\"isLoggedIn\") === \"true\") {\r\n      auth.renewSession();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Router history={history}>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route\r\n              path=\"/callback\"\r\n              render={props => {\r\n                handleAuthentication(props);\r\n                return <Callback {...props} />;\r\n              }}\r\n            />\r\n            <Route\r\n              path=\"/menu/:id\"\r\n              render={props => <AddMenuItem {...props} auth={auth} />}\r\n            />\r\n            <Route\r\n              path=\"/\"\r\n              render={props => (\r\n                <React.Fragment>\r\n                  <Navbar />\r\n                  <About />\r\n                  <MenuList\r\n                    menuItems={this.state.menuItems}\r\n                    authenticated={auth.isAuthenticated()}\r\n                  />\r\n\r\n                  <Gallery gallery={this.state.gallery} />\r\n                  <Contact />\r\n                  {!auth.isAuthenticated() ? (\r\n                    <button type=\"button\" onClick={() => auth.login()}>\r\n                      Login\r\n                    </button>\r\n                  ) : (\r\n                    <div>\r\n                      <button type=\"button\" onClick={() => auth.logout()}>\r\n                        Logout\r\n                      </button>\r\n                      <AddMenuItem {...props} auth={auth} />\r\n                      <AddImg {...props} auth={auth} />\r\n                    </div>\r\n                  )}\r\n                </React.Fragment>\r\n              )}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}